<?php

use Roomify\Bat\Event\Event;

define('ROLE_ADMINISTRATOR', 3); // = 'Administrator'
define('ROLE_ORGANISATION',  4); // = 'Authentifizierte Organisation'
//menu_rebuild();

function depot_admin_access_only() {

  global $user;
  if (!in_array('administrator', $user->roles)){
    return false;
  }
  return true;
  
}

function depot_auth_user_access_only() {

  global $user;
  return $user->uid;
  
}

/**
 * Implements hook_mail()
 * Here we can modify (e.g. templating, il8n) mails before
 * sending them out.
 */
function depot_mail($key, &$message, $params) {

  user_mail_tokens($variables, $data, $options);

  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];

}

/**
 * Implements hook_menu_alter()
 * Display menues & links based on users role
 */
function depot_menu_alter(&$items) {

  //var_dump($items);

   //$items['user/login']['access callback'] = 'depot_auth_user_access_only';
   $items['admin']['access callback'] = 'depot_admin_access_only';

}


/**
 * Implements hook_user_logout
 */
function depot_user_logout(){

  session_destroy();
  drupal_set_message(t('Sie haben sich erfolgreich vom Depot abgemeldet!'));
  drupal_goto();

}

function depot_verfuegbarkeiten_ajax_callback($page_callback_result) {
  // Only render content
  $content = drupal_render($page_callback_result);

  // Add CSS and JS files, add some markup
  $html = '<html><head><title></title>' . drupal_get_css() . drupal_get_js() . '</head><body class="jquery-ajax-load">' . $content . '  <script type="text/javascript" src="http://drupal.localhost/sites/all/modules/bat/modules/bat_fullcalendar/js/bat_fullcalendar_timeline.js"></script></body></html>';
  print $html;

  drupal_page_footer();
}

/**
 * Implements hook_menu
 */
function depot_menu() {

  $items['user/%user/organisation'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Organisation'),
    'page callback' => 'depot_build_user_edit_organisation_form',
    'description' => t('Depot-Konto als gemeinnützige Organisation führen'),
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['ressourcen/%/verfuegbarkeiten'] = array(
    'title' => t('Verfügbarkeiten ändern'),
    'page callback' => 'depot_verfuegbarkeiten_calendar',
    'description' => t('Verfügbarkeiten für alle Einheiten einer Ressource'),
    'access callback' => 'user_is_logged_in',
    'delivery callback' => 'depot_verfuegbarkeiten_ajax_callback',
    'page arguments' => array(1),
  );

  $items['reservierungen/neu'] = array(
    'title' => t('Neue Buchung'),
    'page callback' => 'depot_buchung_neu_form',
    'description' => t('Neue Buchung anlegen'),
    'access callback' => 'user_is_logged_in'
  );

  /*'args'     => array(
          array(
            'name'         => 'unit_ids',
            'type'         => 'string',
            'description'  => t('Unit IDs'),
            'source'       => array('param' => 'unit_ids'),
            'optional'     => TRUE,
          ),
          array(
            'name'         => 'unit_types',
            'type'         => 'string',
            'description'  => t('Unit Types'),
            'source'       => array('param' => 'unit_types'),
            'optional'     => TRUE,
          ),*/

  $items['ressourcen/neu'] = array(
    'title' => t('Neue Ressource anlegen'),
    'page callback' => 'depot_ressource_neu_form',
    'description' => t('Neue Ressource anlegen'),
    'access callback' => 'user_is_logged_in'
  );

  $items['depot/check_availability'] = array(
    'title' => 'Check ressource availability',
    'page callback' => 'depot_ajax_check_availability',
    'description' => 'AJAX method for resources',
      'access callback' => 'user_is_logged_in'
  );

  return $items;
  
}

function depot_verfuegbarkeiten_calendar($unit_type){

  $event_type = 'depot_availability';

  if (empty($unit_type) || !is_integer($unit_type)){
    drupal_not_found();
  }

  global $user;

  $ev_type = bat_event_type_load($event_type);

  // Check if current type support this event type.
  if ($type = bat_type_load($unit_type)) {
    $type_bundle = bat_type_bundle_load($type->type);

    if (is_array($type_bundle->default_event_value_field_ids)) {
      if (!(isset($type_bundle->default_event_value_field_ids[$event_type]) && !empty($type_bundle->default_event_value_field_ids[$event_type]))) {
        return drupal_not_found();
      }
    }
    else {
      return drupal_not_found();
    }
  }
  elseif ($unit_type != 'all') {
    return drupal_not_found();
  }

  // Check if user has permission to view calendar data for this event type.
  if (!user_has_role(ROLE_ADMINISTRATOR) || $type->uid != $user->uid) {
   // TODO: return drupal_access_denied();
  }

  // Pick what modal style to use.
  $calendar_settings['modal_style'] = 'default';
 /*
  $modal_style = array(
    'bat-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 520,
        'height' => 520,
        'addWidth' => 0,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .0,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
    ),
  );
  */
  if ($type = bat_event_type_load($event_type)) {
    $event_granularity = $type->event_granularity;
  }
  else {
    $event_granularity = 'both';
  }

  // All Drupal JS settings inside the batCalendar object.
  $fc_user_settings = array(
    'batCalendar' => array(
      array(
        'unitType' => $unit_type,
        'eventType' => $event_type,
        'eventGranularity' => $event_granularity,
      ),
    ),
  );

  $calendar_settings['user_settings'] = $fc_user_settings;
  $calendar_settings['calendar_id'] = 'fullcalendar-scheduler';

  if ($ev_type->fixed_event_states) {
    $calendar_settings['class'] = array('fixed_event_states');
  }
  else {
    $calendar_settings['class'] = array('open_event_states');
  }

  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/bat_event_ui.css');

  $render_array = array(
    //'event_type_form' => drupal_get_form('bat_event_ui_event_type_form', $unit_type, $event_type),
    //'bulk_update_form' => array(),
    'calendar' => array(
      '#theme' => 'bat_fullcalendar',
      '#calendar_settings' => $calendar_settings,
    ),
  );

  if ($ev_type->fixed_event_states) {
   // $render_array['bulk_update_form'] = drupal_get_form('bat_event_ui_bulk_update_form', $unit_type, $event_type);
  }

  return $render_array;

}

/* Wrapper to handle availability requests */
function depot_ajax_check_availability(){

  $path = explode("/",current_path());
  print_r($path);

  depot_check_availability();

  //drupal_add_http_header('Content-Type', 'application/json');

  /*
    echo json_encode($resultAdresse);
    
*/
  drupal_exit();
}

//function depot_check_availability($rid, $start, $end, $units = 1){
  function depot_check_availability(){

    $rid = 1;
  //$start = new DateTime($start);
  //$end = new DateTime($end);

  $query = db_select('bat_units', 'u')
           ->fields('u', array('type_id'))
           ->condition('type_id', $rid)
           ->execute();

  $unitsCount = $query->rowCount();
      
  if (!$unitsCount) {
    return t('Unbekannte Ressource');
  } else {
    foreach ($query->fetchAll() as $unit) {
   
      $u = bat_unit_load($unit->type_id);
     // var_dump($u);
     // exit();
       // ->condition('created', array($start_time, $end_time), 'BETWEEN');
    }

    if (count($units) == 0) {
      return ROOMS_NO_ROOMS;
    }
    
   return drupal_json_output($matches);
  }
}

/** 
 * Called by path user/%/organisation
 */
function depot_build_user_edit_organisation_form(){

  include_once('forms/depot_user_edit_organisation_form.php');
  $form = drupal_get_form('depot_user_edit_organisation_form');

  return drupal_render($form);

}

/**
 * Called by path buchungen/neu
 * Presents a booking form, based on BAT Booking module
 */
function depot_buchung_neu_form($type = 'standard'){

  global $user;

  $booking = bat_booking_create(array('type' => $type, 'uid' => $user->uid));
  $booking->created = REQUEST_TIME;
  $booking->author_name = $user->name;
  $booking->status = 1;

  include_once('forms/depot_buchung_form.php');
  return drupal_get_form('depot_booking_edit_form', $booking);

}

/**
 * Called by path ressourcen/neu
 * Presents a booking form, based on BAT Booking module
 */
function depot_ressource_neu_form($type = 'depot'){

  global $user;

  $booking = bat_type_create(array('type' => $type, 'uid' => $user->uid));
  $booking->created = REQUEST_TIME;
  $booking->author_name = $user->name;
  $booking->status = 1;

  include_once('forms/depot_ressource_form.php');

  return drupal_get_form('depot_ressource_edit_form', $booking);

}

function _buchungen_neu_redirect() {

  drupal_goto('admin/bat/config/booking/add/standard');
  
}


/**
 * Implements hook_preprocess_views_view_table
 * Disable table header for "Neueste Ressourcen" block
 */
function depot_preprocess_views_view_table(&$vars) {
  
  if ($vars['view']->name == 'neueste_ressourcen') {
    $vars['header'] = array();
  }
  
}

/**
 * Implements hook_form_alter
 * Turns "kategorie"- and "bezirk"-state-id-filter into select-field
 * TODO: Add caching
 * TODO: Sort #options via sort()
 */
function depot_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id){
    
    case 'views_exposed_form':
    
      $form['bezirk_id']['#type'] = "select";
      $form['bezirk_id']['#size'] = null;
      $form['bezirk_id']['#default_value'] = 'All';
      $form['bezirk_id']['#required'] = FALSE;
      $form['bezirk_id']['#options'] = depot_get_bezirke(true);
      
      $form['kategorie_id']['#type'] = "select";
      $form['kategorie_id']['#size'] = null;
      $form['kategorie_id']['#default_value'] = 'All';
      $form['kategorie_id']['#options'] = depot_get_kategorien(true);
    
    break;
    
  }
}

/**
 * Implements hook_user_view().
 */
function depot_user_view($account, $view_mode) {

  global $user;

  // TODO: 2 forms, seperated by hr. Form 1: inputs from $user

  $text = '<h3>'.t('Ihr Depot Konto').'</h3>';
  $text .= '<p>'.t('Hier können Sie bestehende Kontaktdaten ändern oder Ihr Konto als Organisation betreiben.') .'</p>';
  $text .= '<p>'.t('Sie haben noch offene Fragen oder möchten Ihr Konto deaktivieren lassen? Bitte wenden Sie sich <a href="/contact" title="Kontaktformular">direkt an uns</a>.').'</p><hr />';
 
  $account->content['intro'] = array(
      '#type' => 'user_profile_item',
      '#markup' => $text,
      '#title' => '',
      '#attributes' => array('class' => array('user-page-intro-text')),
  );

  if (user_has_role(ROLE_ORGANISATION)){
    $text = '<p>'.t('<strong>Gemeinwohlanerkennung: <span style="color:green;">Aktiv</span></strong></p><hr />').'</p>';
  } else {
    $text = '<p>'.t('<strong>Gemeinwohlanerkennung: <span style="color:red;">Inaktiv</span></strong></p><hr />').'</p>';
  }
  
  $account->content['field_is_organisation'] = array(
      '#type' => 'user_profile_item',
      '#markup' => $text,
      '#weight' => 5,
      '#title' => '',
      '#attributes' => array('class' => array('user-page-is-organisation')),
  );

}

/**
 * function depot_get_available_units_by_rid
 * @param string rid
 * @param string $start_date
 * @param string $end_date
 * @param bool $format
 * @return array $events / [if $format:] array $event_ids
 */
function depot_get_available_units_by_rid($rid, $start_date, $end_date, $format = false){

  $modulePath = drupal_get_path('module', 'bat_api');
  include_once $modulePath .'/bat_api.module';

  $events = bat_api_services_events_index_calendar(0, $rid, $start_date, $end_date, 'depot_availability', TRUE);  

  if ($format){
    $event_ids = array();
    $clean_up_ids = array();
    foreach ($events as $key => $event){
      if ($event['blocking']){
        
        if ((strtotime($event['start']) <= strtotime($start_date) && strtotime($event['end']) <= strtotime($end_date))
             || (strtotime($event['start']) <= strtotime($end_date) && strtotime($event['end']) >= strtotime($start_date))){
          $clean_up_ids[$event['resourceId']] = true;
        }
      } else {
        $event_ids[$event['resourceId']] = true;
      }
    }
    foreach ($clean_up_ids as $key => $void){
      if ($event_ids[$key])
        unset($event_ids[$key]);
    }
    return $event_ids;

  }

  return $events;
  
}

/*
  function depot_get_bezirke
  @return array
*/
function depot_get_bezirke($format = false){
  if ($format){
    $result = array();
    $result[''] = '<'.t('Alle').'>';
    foreach (bat_event_get_states('depot_bezirk') as $state_id => $state){
      $result[$state_id] = $state['label'];
    }
    return $result;
  }
  return bat_event_get_states('depot_bezirk');
  
}

/**
 * function depot_get_kategorien
 * @return array
 */
function depot_get_kategorien($format = false){
 if ($format){
    $result = array();
    $result[''] = '<'.t('Alle').'>';
    foreach (bat_event_get_states('depot_kategorie') as $state_id => $state){
      $result[$state_id] = $state['label'];
    }
    return $result;
  }
  return bat_event_get_states('depot_kategorie');
  
}

/**
 * Add or remove units for certain ressource
 */
function depot_units_bulk_action($action = 'add', $units_name, $type_id, $total_units){
    
    global $user;

    if ($action == 'add'){

      for ($i = 1; $i <= $total_units; $i++) {
          $unit = bat_unit_create(array('type' => 'default'));
          $unit->name = $units_name . ' ' . $i;
          $unit->created = REQUEST_TIME;
      
          $unit->type_id = $type_id;
          $unit->default_state = 1;
          $unit->uid = $user->uid;
          $unit->save();
      }

    }

}