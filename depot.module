<?php

define('ROLE_ADMINISTRATOR', 3); // = 'Administrator'
define('ROLE_ORGANISATION', 5); // = 'Organisation'
define('ROLE_ORGANISATION_AUTH', 4); // = 'Authentifizierte Organisation'

define('ROLE_ORGANISATION_AUTH_NAME', 'Organisation');
define('ROLE_ORGANISATION_NAME', 'Authentifizierte Organisation');
define('ROLE_ADMINISTRATOR_NAME', 'Administrator');

// 4 debug: menu_rebuild();

function depot_admin_access_only() {

  global $user;
  if (!in_array(ROLE_ADMINISTRATOR_NAME, $user->roles)){
    return false;
  }
  return true;
  
}

function depot_auth_user_access_only() {

  global $user;
  return $user->uid;
  
}

/**
 * Implements hook_mail()
 * Here we can modify (e.g. templating, il8n) mails before
 * sending them out.
 */
function depot_mail($key, &$message, $params) {

  //user_mail_tokens($variables, $data, $options);

  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];

}

/**
 * Implements hook_menu_alter()
 * Display menues & links based on users role
 */
function depot_menu_alter(&$items) {

  //var_dump($items);

   //$items['user/login']['access callback'] = 'depot_auth_user_access_only';
   $items['admin']['access callback'] = 'depot_admin_access_only';

}


/**
 * Implements hook_user_logout
 */
function depot_user_logout(){

  session_destroy();
  drupal_set_message(t('Sie haben sich erfolgreich vom Depot abgemeldet!'));
  drupal_goto();

}

function depot_verfuegbarkeiten_ajax_callback($page_callback_result) {
  // Only render content
  global $base_url;
  $content = drupal_render($page_callback_result);

  // Add CSS and JS files, add some markup
  $html = '<html><head><title></title>' . drupal_get_css() . drupal_get_js() . '</head><body class="jquery-ajax-load">' . $content . '  <script type="text/javascript" src="'. $base_url .'/sites/all/themes/depot_theme/js/fullcalendar_timeline.js"></script><style type="text/css">div.ctools-modal-content .form-item label {width:100%;}.form-item {margin:0;}.hide{display:none;}</style></body></html>';
  print $html;

  drupal_page_footer();
}

/**
 * Implements hook_menu
 */
function depot_menu() {

  $items['user/%user/organisation'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Organisation'),
    'page callback' => 'depot_build_user_edit_organisation_form',
    'description' => t('Depot-Konto als gemeinnützige Organisation führen'),
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['ressourcen/%/verfuegbarkeiten'] = array(
    'title' => t('Verfügbarkeiten ändern'),
    'page callback' => 'depot_verfuegbarkeiten_calendar',
    'description' => t('Verfügbarkeiten für alle Einheiten einer Ressource'),
    'access callback' => 'user_is_logged_in',
    'delivery callback' => 'depot_verfuegbarkeiten_ajax_callback',
    'page arguments' => array(1),
  );

  $items['reservierungen/neu'] = array(
    'title' => t('Neue Reservierung'),
    'page callback' => 'depot_buchung_form',
    'description' => t('Neue Reservierung anlegen'),
    'access callback' => 'user_is_logged_in'
  );

  $items['reservierungen/%'] = array(
    'title' => t('Reservierungsdetails'),
    'page callback' => 'depot_buchung_detail',
    'description' => t('Reservierung einsehen'),
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['reservierungen/%/edit'] = array(
    'title' => t('Reservierung bearbeiten'),
    'page callback' => 'depot_buchung_form',
    'description' => t('Reservierung bearbeiten'),
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['reservierungen/%/change_status'] = array(
    'title' => t('Reservierungsstatus ändern'),
    'page callback' => 'depot_buchung_change_status',
    'description' => t('Reservierungsstatus ändern'),
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['reservierungen/%/verleihvertrag'] = array(
    'title' => t('Verleihvertrag'),
    'page callback' => 'depot_buchung_verleihvertrag',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['reservierungen/%/delete'] = array(
    'title' => t('Reservierung löschen'),
    'page callback' => 'depot_buchung_delete',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['ressourcen/neu'] = array(
    'title' => t('Neue Ressource anlegen'),
    'page callback' => 'depot_ressource_form',
    'description' => t('Neue Ressource anlegen'),
    'access callback' => 'user_is_logged_in'
  );

  $items['ressourcen/%/edit'] = array(
    'title' => t('Ressource bearbeiten'),
    'page callback' => 'depot_ressource_form',
    'description' => t('Ressource bearbeiten'),
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
  );

  $items['depot/check_availability'] = array(
    'title' => 'Check ressource availability',
    'page callback' => 'depot_ajax_check_availability',
    'description' => 'AJAX method for resources',
    'access callback' => 'user_is_logged_in'
  );

  $items['depot/user_auth_confirm/%'] = array(
    'page callback' => 'depot_user_auth_confirm',
    'access callback' => 'depot_admin_access_only',
    'page arguments' => array(2),
  );

  return $items;
  
}

function depot_user_auth_confirm($uid){

  $user = user_load($uid);
  $to = $user->mail;

  drupal_set_message('Depot: Versuche nun, Rolle zuzuteilen. Kommt es zu einer Fehlermeldung, wurde möglicherweise der Link doppelt angeklickt womit der Benutzer bereits die neue Rolle zugeteilt bekommen hat!');

  // Try {
  db_query('INSERT INTO {users_roles} (uid, rid) VALUES (:uid, :rid)', array(':uid' => $uid, ':rid' => ROLE_ORGANISATION_AUTH));
  // catch: drupal_set_message('Bereits eingetragen')

  $mail_body = "Lieber Depot-Nutzer,\r\n\r\n";
  $mail_body .= "Dein Antrag auf Gemeinwohl-Anerkennung wurde bestätigt. Deine Organisation kann nun Ressourcen zu besonderen Preisen ausleihen.\r\n\r\n";
  $mail_body .= "Viele Grüße,\r\n Dein Team von Depot Leipzig";
  $params = array(
    'body' => $mail_body,
    'subject' => t('Depot Leipzig: Antrag auf Gemeinnützigkeit bestätigt'),
  );

  drupal_mail('depot','depot_organisation_authenticated',$to,'de',$params);
  drupal_set_message(t('Dem Nutzer wurde erfolgreich die Rolle "'.ROLE_ORGANISATION_AUTH_NAME.'" zugeteilt und dieser hierüber informiert.'));
  drupal_goto('admin');

}

function depot_verfuegbarkeiten_calendar($unit_type){

  $event_type = 'depot_availability';

  if (empty($unit_type) || !is_integer($unit_type)){
    drupal_not_found();
  }

  global $user;

  $ev_type = bat_event_type_load($event_type);

  // Check if current type support this event type.
  if ($type = bat_type_load($unit_type)) {
    $type_bundle = bat_type_bundle_load($type->type);

    if (is_array($type_bundle->default_event_value_field_ids)) {
      if (!(isset($type_bundle->default_event_value_field_ids[$event_type]) && !empty($type_bundle->default_event_value_field_ids[$event_type]))) {
        return drupal_not_found();
      }
    }
    else {
      return drupal_not_found();
    }
  }
  elseif ($unit_type != 'all') {
    return drupal_not_found();
  }

  // Check if user has permission to view calendar data for this event type.
  if (!user_has_role(ROLE_ADMINISTRATOR) || $type->uid != $user->uid) {
    drupal_access_denied();
  }

  // Pick what modal style to use.
  $calendar_settings['modal_style'] = 'default';
 /*
  $modal_style = array(
    'bat-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 520,
        'height' => 520,
        'addWidth' => 0,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .0,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
    ),
  );
  */
  if ($type = bat_event_type_load($event_type)) {
    $event_granularity = $type->event_granularity;
  }
  else {
    $event_granularity = 'both';
  }

  // All Drupal JS settings inside the batCalendar object.
  $fc_user_settings = array(
    'batCalendar' => array(
      array(
        'unitType' => $unit_type,
        'eventType' => $event_type,
        'eventGranularity' => $event_granularity,
      ),
    ),
  );

  $calendar_settings['user_settings'] = $fc_user_settings;
  $calendar_settings['calendar_id'] = 'fullcalendar-scheduler';

  if ($ev_type->fixed_event_states) {
    $calendar_settings['class'] = array('fixed_event_states');
  }
  else {
    $calendar_settings['class'] = array('open_event_states');
  }

  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/bat_event_ui.css');

  $render_array = array(
    //'event_type_form' => drupal_get_form('bat_event_ui_event_type_form', $unit_type, $event_type),
    //'bulk_update_form' => array(),
    'calendar' => array(
      '#theme' => 'bat_fullcalendar',
      '#calendar_settings' => $calendar_settings,
    ),
  );

  if ($ev_type->fixed_event_states) {
   // $render_array['bulk_update_form'] = drupal_get_form('bat_event_ui_bulk_update_form', $unit_type, $event_type);
  }

  return $render_array;

}

/* Wrapper to handle availability requests */
function depot_ajax_check_availability(){

  $path = explode("/",current_path());
  print_r($path);

  depot_check_availability();

  //drupal_add_http_header('Content-Type', 'application/json');

  /*
    echo json_encode($resultAdresse);
    
*/
  drupal_exit();
}

function depot_get_units_count($rid){
  
  $query = db_select('bat_units', 'u')
           ->fields('u', array('type_id'))
           ->condition('type_id', $rid)
           ->execute();

  return $query->rowCount();

}

function depot_add_units($type_id, $units_name, $total_units, $id_name_starter = null){

  global $user;

  for ($i = 1; $i <= $total_units; $i++) {
    $unit = bat_unit_create(array('type' => 'default'));
    $unit->name = $units_name . ' ' . ($id_name_starter ? $id_name_starter + $i : $i);
    $unit->created = REQUEST_TIME;
      
    $unit->type_id = $type_id;
    $unit->default_state = 1;
    $unit->uid = $user->uid;
    $unit->save();
  }
}

//dump:
//function depot_check_availability($rid, $start, $end, $units = 1){
  function depot_check_availability(){

    $rid = 1;
  //$start = new DateTime($start);
  //$end = new DateTime($end);

  $unitsCount = depot_get_units_count($rid);
      
  if (!$unitsCount) {
    return t('Unbekannte Ressource');
  } else {
    foreach ($query->fetchAll() as $unit) {
   
      $u = bat_unit_load($unit->type_id);
     // var_dump($u);
     // exit();
       // ->condition('created', array($start_time, $end_time), 'BETWEEN');
    }

    if (count($units) == 0) {
      return ROOMS_NO_ROOMS;
    }
    
   return drupal_json_output($matches);
  }
}

/** 
 * Called by path user/%/organisation
 */
function depot_build_user_edit_organisation_form() {

  include_once('forms/depot_user_organisation_form.php');

  $form[] = array();

  $form[1] = drupal_get_form('depot_user_organisation_form');
  if (user_has_role(ROLE_ORGANISATION) && !user_has_role(ROLE_ORGANISATION_AUTH)){
    $form[2] = drupal_get_form('depot_user_organisation_request_form');
  }

  return drupal_render($form);

}

/** 
 * Called by path reservierungen/%id
 * Only show booking details & state
 */
function depot_buchung_detail($booking_id) {

  return depot_buchung_form($booking_id);

}

function depot_inline_entity_form_reference_form_alter(&$reference_form, &$form_state) {
  
  $field = field_info_field($reference_form['#parents'][0]);
  $entity_type = $field['settings']['target_type'];
  $info = entity_get_info($entity_type);
  $bundles = $info['bundles'];
  $entities = entity_load($entity_type);
  $options = array();
  foreach($entities as $entity){
    $title = entity_label($entity_type, $entity);
    $options[$title.' ('.$entity->id.')'] = $title . ' (' . $bundles[$entity->type]['label'] . ')';
  }
  $reference_form['entity_id']['#type'] = 'select';
  $reference_form['entity_id']['#options'] = $options;

}

/**
 * Called by path reservierungen/%id/delete
 */
function depot_buchung_delete($booking_id){
  
  global $user;
  global $base_url;

  $booking = bat_booking_load($booking_id);
  $booking_proxy = get_object_vars($booking);
  $anbieter = $booking_proxy['field_verleiher']['und'][0]['value'];
  $ausleiher = $booking_proxy['field_ausleiher']['und'][0]['value'];

  if (empty($booking) || (!user_has_role(ROLE_ADMINISTRATOR) && $anbieter != $user->uid && $ausleiher != $user->uid)){
    drupal_access_denied();
    drupal_exit();
  }

  $created = (new DateTime())->setTimestamp($booking_proxy['created']);

  // Get & Delete connected events and its references
  $booking_events = db_select('field_data_field_booking_id','e')
   ->fields('e', array('entity_id'))
   ->condition('field_booking_id_value', $booking_id)
   ->execute()
   ->fetchAll();

   // bat_event_delete($form_state['bat_event']);

   foreach ($booking_events as $event){
     $booking_event = bat_event_load($event->entity_id);
     $booking_event->delete();
   }
  
   $booking->delete();

   $mail_body = "Lieber Nutzer des Depot Leipzig,\r\n\r\n";
   $mail_body .= "hiermit bestätigen wir, dass Deine Leihanfrage vom ".$created->format('d.m.Y')." (ID ".$booking->booking_id.") storniert und alle damit verbundenen Reservierungen aus unserem System entfernt wurden.\r\n\r\n";
   $mail_body .= "Viele Grüße,\r\n Dein Team vom Depot Leipzig";

   $params = array(
     'body' => $mail_body,
     'subject' => t('Depot Leipzig: Stornierung Deiner Leihanfrage'),
   );

  
   drupal_mail('depot','depot_buchung_delete_form', user_load($ausleiher)->mail,'de', $params);
   drupal_mail('depot','depot_buchung_delete_form', user_load($anbieter)->mail,'de', $params);

   drupal_set_message(t('Die Reservierung wurde erfolgreich storniert und Ver- bzw. Entleiher informiert.'));
   drupal_goto('ressourcen');

}

/** 
 * Called by path reservierungen/%id/change_status
 */
function depot_buchung_change_status($booking_id){
  
  global $user;
  global $base_url;

  $booking = bat_booking_load($booking_id);

  if (!user_has_role(ROLE_ADMINISTRATOR) && $booking->field_verleiher['und'][0]['value'] != $user->uid){
    drupal_goto('mein-depot');
  }

  // TODO: Is already accepted? If so, extend view

  if (!empty($_POST)){
    
    $booking->changed = time();
    $booking->field_genehmigt['und'][0]['value'] = ($booking->field_genehmigt['und'][0]['value'] == 0) ? 1 : 0;
    $booking->save();

    $anbieter = user_load($booking->field_verleiher['und'][0]['value']);

    $ressource = get_object_vars(bat_type_load($booking->field_ressource_id['und'][0]['value']));
    $created = (new DateTime())->setTimestamp($booking->created);

    $mail_body = "Lieber Nutzer des Depot Leipzig,\r\n\r\n";
    $mail_body .= "Deine Leihanfrage vom ".$created->format('d.m.Y')." wurde vom Anbieter bestätigt. Bitte prüfe nocheinmal die Reservierungs-Daten unter ".$base_url."/reservierungen/".$booking->booking_id."/edit, denn es kann sein, dass der Anbieter Änderungen ggü Deinen Wünschen vorgenommen hat.\r\n\r\n";
   
    if (isset($ressource['field_verleihvertrag_']['und'][0]['value']) && $ressource['field_verleihvertrag_']['und'][0]['value']){
      $mail_body .= "Zudem wurde ein Leihvertrag erstellt welcher unter ".$base_url."/reservierungen/".$booking->booking_id."/verleihvertrag abrufbar ist. Bei der Übergabe der Ressource wird der Anbieter Dich ggf. bitten, den dann ausgedruckten(!) Verleihvertrag zu unterschreiben.\r\n\r\n";
    }

    if (isset($ressource['field_text_buchungsbes_tigung']['und'][0]['value'])){
      $mail_body .= "Der Anbieter hat zudem folgenden Hinweis vermerkt: ".$ressource['field_text_buchungsbes_tigung']['und'][0]['value']."\r\n\r\n";
    }

    $mail_body .= "Bitte stelle unbedingt sicher, dass Du am Abhol-/Bereitstellungsort der Ressource pünktlich eintriffst, denn dem Anbieter der Ressource wird das Teilen nur Spaß machen, wenn er nicht unnötig auf Nutzer seiner Ressource warten muss. Sollte Dir etwas dazwischen kommen und Du kannst deshalb nicht pünktlich erscheinen, informiere den Ansprechpartner am Abhol-/Bereitstellungsort bitte so früh wie möglich über die angegebene Telefonnummer (". $anbieter->field_telefonnummer['und'][0]['value'] .") bzw. via Mail (". $anbieter->mail .").\r\n\r\n";

    $mail_body .= "Bei weiteren Fragen kontaktiere bitte direkt den Anbieter. Sollte beim Buchungsprozess etwas nicht wie gewüncht funktioniert haben, teile uns dies bitte unter ".$base_url."/contact mit.\r\n\r\n";
    $mail_body .= "Wir hoffen, Dir gefällt das depot und das Teilen von Ressourcen klappt wie erwartet. Hast Du vielleicht selbst Ressourcen, die Du gerne mit anderen teilen möchtest? Dann würde es uns freuen, wenn Du sie unter https://depot-leipzig.de/ressourcen/neu in depot-leipzig.de einstellen würdest.\r\n\r\n";
    $mail_body .= "Vielen Dank und bis bald, Dein Team vom Depot Leipzig";

    $params = array(
      'body' => $mail_body,
      'subject' => t('Depot Leipzig: Bestätigung Deiner Reservierungsanfrage'),
      'headers' => array(
        'Cc' => $anbieter->mail
      )
    );
  
    drupal_mail('depot','depot_buchung_form', user_load($booking->field_ausleiher['und'][0]['value'])->mail,'de', $params);

    drupal_set_message(t('Die Reservierung wurde genehmigt und der Interessent benachrichtigt!'));
    
    if (isset($ressource['field_verleihvertrag_']['und'][0]['value']) && $ressource['field_verleihvertrag_']['und'][0]['value']){
      drupal_set_message('Zudem wurde ein Leihvertrag erstellt welcher der Reservierung beiliegt.');
    }

    drupal_goto('mein-depot/reservierungen/' . $booking_id);

  } else {
    $newStatus = ($booking->field_genehmigt['und'][0]['value'] == 0) ? t('akzeptiert') : t('abgewiesen');
    $div = '<div id="status-change-panel" class="medium-12 panel">'.t('Möchten Sie den Status für die Reservierung auf <strong>@status</strong> setzen?', array('@status'=>$newStatus));
    $div .= '<br /><br /><form method="post" action="#"><input type="hidden" name="bla" value="bla" /><input type="submit" class="button" value="'.t('Status ändern').'"></form><a href="/mein-depot/reservierungen">'.t('Abbrechen').'</a></div>';
    return $div;
  }

}

function depot_buchung_verleihvertrag($booking_id){
  
  global $user;

  $booking = bat_booking_load($booking_id);
  $anbieter = user_load($booking->field_verleiher['und'][0]['value']);
  $ausleiher = user_load($booking->field_ausleiher['und'][0]['value']);
  $ressource = get_object_vars(bat_type_load($booking->field_ressource_id['und'][0]['value']));

  if (isset($ressource['field_verleihvertrag_']['und'][0]['value'])){
    $booking_header = depot_buchung_form($booking_id, true)['buchung_header']['#markup'];
    $booking_header = str_replace('<div class="medium-12 column"><h5 class="left">Ihre Reservierung</h5><hr /></div>','',$booking_header);
    include_once(path_to_theme().'/templates/verleihvertrag.tpl.php');
    return pdf_using_mpdf_api($html);
  } else if ($anbieter->uid != $user->uid && $ausleiher->uid != $user->uid) {
    drupal_access_denied();
  } else {
    drupal_set_message(t('Der Anbieter hat Verleihverträge für diese Ressource deaktiviert'),'warning');
    drupal_access_denied();
  }
}

/**
 * Called by path buchungen/neu
 * Presents a booking form, based on BAT Booking module
 */
function depot_buchung_form($booking_id = null, $force_header_only = false){

  global $user;

  if (isset($booking_id)){
    $booking = bat_booking_load($booking_id);
  } else {
    $booking = bat_booking_create(array('type' => 'standard', 'uid' => $user->uid));
    $booking->created = REQUEST_TIME;
    $booking->author_name = $user->name;
    $booking->status = 1;
  }

  if ($force_header_only){
    $booking->force_header_only = 1;
  }

  include_once('forms/depot_buchung_form.php');
  return drupal_get_form('depot_booking_edit_form', $booking);

}

/**
 * Called by path ressourcen/neu OR /ressouren/%/edit
 * Presents a booking form, based on BAT Booking module
 */
function depot_ressource_form($type_id = null){

  global $user;

  if (empty($type_id)){
    $type = bat_type_create(array('type' => 'depot', 'uid' => $user->uid));
    $type->created = REQUEST_TIME;
    $type->author_name = $user->name;
    $type->status = 1;
  } else {
    $type = bat_type_load($type_id);
  }

  return drupal_get_form('depot_ressource_edit_form_wrapper', $type);

}

function depot_ressource_edit_form_wrapper($form, &$form_state, $type){

  include_once('forms/depot_ressource_form.php');
  return depot_ressource_edit_form($form, $form_state, $type);

}

function depot_ressource_edit_form_submit_wrapper($form, &$form_state){

  include_once('forms/depot_ressource_form.php');
  return depot_ressource_edit_form_submit($form, $form_state);

}


function _buchungen_neu_redirect() {

  drupal_goto('admin/bat/config/booking/add/standard');
  
}


/**
 * Implements hook_preprocess_views_view_table
 */
function depot_preprocess_views_view_table(&$vars) {

  switch ($vars['view']->name){

    case 'reservierungen_meine_reservierungen' :
    case 'reservierungen_anfragen' :

      // @TODO Give outdated reservations an opacity-class
      /*print_r($vars);
      exit();

      foreach($vars['result']){
        //
      }

      */
    break;
  
    case 'neueste_ressourcen' :
      // Useless as the regarding block has been disabled
      $vars['header'] = array();
    break;

  }
  
}

/**
 * Implements hook_form_alter
 * Turns "kategorie"- and "bezirk"-state-id-filter into select-field
 * TODO: Add caching
 * TODO: Sort #options via sort()
 */
function depot_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id){

    case 'user_profile_form':
    case 'user_pass':

      if (isset($form['contact'])){
        $form['contact']['contact']['#description'] = strip_tags($form['contact']['contact']['#description']);
      }
      unset($form['field_organisation_nachweis']);

    break;
    
    case 'views_exposed_form':
    
      $form['bezirk_id']['#type'] = "select";
      $form['bezirk_id']['#size'] = null;
      $form['bezirk_id']['#default_value'] = 'All';
      $form['bezirk_id']['#required'] = FALSE;
      $form['bezirk_id']['#options'] = depot_get_bezirke(true);
      
      $form['kategorie_id']['#type'] = "select";
      $form['kategorie_id']['#size'] = null;
      $form['kategorie_id']['#default_value'] = 'All';
      $form['kategorie_id']['#required'] = FALSE;
      $form['kategorie_id']['#options'] = depot_get_kategorien(true);
      
    break;
    
  }
}

/**
 * Implements hook_user_view().
 */
function depot_user_view($account, $view_mode) {

  global $user;

  // TODO: 2 forms, seperated by hr. Form 1: inputs from $user

  $text = '<h3>'.t('Ihr Depot Konto').'</h3>';
  $text .= '<p>'.t('Hier können Sie bestehende Kontaktdaten ändern oder Ihr Konto als Organisation betreiben.') .'</p>';
  $text .= '<p>'.t('Sie haben noch offene Fragen oder möchten Ihr Konto deaktivieren lassen? Bitte wenden Sie sich <a href="/contact" title="Kontaktformular">direkt an uns</a>.').'</p><hr />';
 
  $account->content['intro'] = array(
      '#type' => 'user_profile_item',
      '#markup' => $text,
      '#title' => '',
      '#attributes' => array('class' => array('user-page-intro-text')),
  );

  if (user_has_role(ROLE_ORGANISATION_AUTH)){
    $text = '<p>'.t('<strong>Status der Gemeinwohlanerkennung: <span style="color:green;">Aktiv</span></strong></p><hr />').'</p>';
  } else {
    $text = '<p>'.t('<strong>Status der Gemeinwohlanerkennung: <span style="color:red;">Inaktiv</span></strong></p><hr />').'</p>';
  }

  unset($account->content['field_organisation_nachweis']);
  $account->content['field_is_organisation'] = array(
      '#type' => 'user_profile_item',
      '#markup' => $text,
      '#weight' => 5,
      '#title' => '',
      '#attributes' => array('class' => array('user-page-is-organisation')),
  );

}

/**
 * function depot_get_available_units_by_rid
 * @param string rid
 * @param string $start_date (Y-m-d H:i)
 * @param string $end_date (Y-m-d H:i)
 * @param bool $format
 * @return array $events / [if $format:] array $event_ids
 */
function depot_get_available_units_by_rid($rid, $start_date, $end_date, $format = false){

  $modulePath = drupal_get_path('module', 'bat_api');
  include_once $modulePath .'/bat_api.module';

  $events = bat_api_services_events_index_calendar(0, $rid, $start_date, $end_date, 'depot_availability', TRUE);  
  
  if ($format){
    $event_ids = array();
    $clean_up_ids = array();
    foreach ($events as $key => $event){
      if ($event['blocking']){
        
        if ((strtotime($event['start']) <= strtotime($start_date) && strtotime($event['end']) <= strtotime($end_date))
             || (strtotime($event['start']) <= strtotime($end_date) && strtotime($event['end']) >= strtotime($start_date))){
          $clean_up_ids[$event['resourceId']] = true;
        }
      } else {
        $event_ids[$event['resourceId']] = true;
      }
    }
    foreach ($clean_up_ids as $key => $void){
      if (isset($event_ids[$key])){
        unset($event_ids[$key]);
      }
    }
    return $event_ids;

  }

  return $events;
  
}

/*
  function depot_get_bezirke
  @return array
*/
function depot_get_bezirke($format = false){
  
  if ($format){
    $result = array();
    $result[''] = '<'.t('Alle').'>';
    foreach (bat_event_get_states('depot_bezirk') as $state_id => $state){
      $result[$state_id] = $state['label'];
    }
    natcasesort($result);
    return $result;
  }
  return bat_event_get_states('depot_bezirk');
  
}

/**
 * function depot_get_kategorien
 * @return array
 */
function depot_get_kategorien($format = false){

 if ($format){
    $result = array();
    $result[''] = '<'.t('Alle').'>';
    foreach (bat_event_get_states('depot_kategorie') as $state_id => $state){
      $result[$state_id] = $state['label'];
    }
    natcasesort($result);
    return $result;
  }
  return bat_event_get_states('depot_kategorie');
  
}

function depot_form_goto($link){

  if (!user_has_role(ROLE_ADMINISTRATOR)){
    drupal_goto($link);
  }

}

function depot_bat_calendar_settings_alter(&$calendar_settings) {
  // Manual mods
  $calendar_settings['batCalendar'][0]['viewsTimelineThirtyDayButtonText'] = '~30 days~';
  $calendar_settings['batCalendar'][0]['viewsTimelineThirtyDaySlotDuration'] = '6:00';
}

/** 
 * Wrapper to set [and manipulate] event states 
 * @param action : "add / edit / remove" [TODO]
 */
function depot_events_bulk_action($action, $type_id, $total_units, $begin, $end, $event_state = 'gebucht', $label = '', $booking_id = null){
  
  // Simulate form context
  $context = array(
      'isEditAction' => ($action == 'edit'),
      'form_values' => array(
        'bat_start_date' => $begin,
        'bat_end_date' => $end,
        'event_state' => $event_state,
        'event_type' => 'depot_availability'
    )
  );

  if (!empty($booking_id)){
    $context['form_values']['field_booking_id'] = $booking_id;
  }

  if (!empty($label)){
    $context['form_values']['field_label'] = $label;
  }
  
  $free_units = depot_get_available_units_by_rid($type_id, $begin, $end);

  watchdog('depot', 'total_units: '.(count($free_units) < $total_units) ? count($free_units) : $total_units . '  free_units: '. var_dump($free_units));

  if ($action == 'add'){

    // If meanwhile there was an order: Reduce units number to avoid over-bookings
    $total_units = (count($free_units) < $total_units) ? count($free_units) : $total_units;
    for ($i = 0; $i <= $total_units; $i++) {
      $unit = bat_unit_load(str_replace('S','',$free_units[$i]['resourceId']));
      bat_event_unit_set_state($unit, $context);
    }

  } elseif ($action == 'edit' && !empty($booking_id)){

    // Get connected events
    $booking_events = db_select('field_data_field_booking_id','e')
      ->fields('e', array('entity_id'))
      ->condition('field_booking_id_value', $booking_id)
      ->execute()
      ->fetchAll();
    
    $event_time = bat_event_load($booking_events[0]->entity_id);

    // If timespan changed: Loop events, set new timespan
    if ($event_time->start_date != $begin || $event_time->end_date != $end){
      foreach ($booking_events as $booking_event){
        $event = bat_event_load($booking_event->entity_id);
        $event->start_date = $begin;
        $event->end_date = $end;
        $event->start_date_object = new DateTime($begin);
        $event->end_date_object = new DateTime($end);
        $event->save();
      }
    }

    /* IN CASE OF BUGS:
      $event->start_date = $start_date->format('Y-m-d H:i');
      // Always subtract one minute from the end time. FullCalendar provides
      // start and end time with the assumption that the last minute is *excluded*
      // while BAT deals with times assuming that the last minute is included.
      $end_date->sub(new DateInterval('PT1M'));
      $event->end_date = $end_date->format('Y-m-d H:i');
    */

   // echo count($booking_events);
   // echo $total_units;

    // If selected more units than before: Set new ones
    if (count($booking_events) < $total_units && $free_units >= (count($booking_events) - $total_units)){
      depot_events_bulk_action('add', $type_id, (count($booking_events) - $total_units), $begin, $end, 'gebucht', $label, $booking_id);
      drupal_set_message('Es wurden @count Einheiten hinzugefügt.', array('@count' => count($booking_events) - $total_units));
    }

    // If selected less units than before: remove units
    if (count($booking_events) > $total_units){
      //echo 'change unit down'; exit();
      for ($i = 0; $i < (count($booking_events)-$total_units); $i++){
        $event = bat_event_load($booking_events[$i]->entity_id);
        $event->delete();
      }
    }
  }
  // Idea: If edit, collect action-statement and print itvia drupal_set_message
}

/**
 * Wrapper to do CRUD actions on ressource-unit's
 */
function depot_units_bulk_action($action, $units_name, $type_id, $total_units){
    
    global $user;

    if ($action == 'add'){

      depot_add_units($type_id, $units_name, $total_units);

    } else if ($action == 'edit'){

      $units = depot_get_units_count($type_id);
      if ($units > $total_units){
        // remove
      } else if ($units < $total_units){
        depot_add_units($type_id, $units_name, $total_units-$units, $units);
      }

    } else if ($action == 'remove'){
      // remove
    }

}

// THIS IS ONLY FOR TEMPORARY USE.
function depot_upload_file() {

  global $base_url;

  if ($wrapper = file_stream_wrapper_get_instance_by_uri('public://')) {

    $newFileName = preg_replace('/\s+/', '_',basename($_FILES['anhang']['name']));
    $newFileName = htmlentities(stripslashes($newFileName));
 
    $uploaddir = $wrapper->realpath();
    $uploadFile = $uploaddir . '/' . $newFileName;

    if (move_uploaded_file($_FILES['anhang']['tmp_name'], $uploadFile)) {
      return $base_url . '/sites/default/files/' . $newFileName;
    } else {
      return false;
    }
  }
}

function humanize_price(&$price){
  
  if ($price == '0'){
    $price = null;
    return;
  }

  $price = str_replace('€','',$price);
  $price = str_replace(',','.',$price);

  $formatter = new NumberFormatter('de_DE', NumberFormatter::CURRENCY);
  $price = $formatter->formatCurrency($price, 'EUR');

}

// Especially for buchung form...
function machine_to_human_price($prices){

  if ($returnAsString = !is_array($prices)){
    $prices = array($prices);
  }

  foreach ($prices as $key => $price){
    if (strpos($price,'.') != FALSE){
      if (strlen(substr($price,-1,2)) == 1){
        $prices[$key] = str_replace('.',',',$price).'0';
      }
    }     
  }

  if ($returnAsString){
    return $prices[0];
  }

  return $prices;

}