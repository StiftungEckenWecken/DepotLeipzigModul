<?php

use Roomify\Bat\Event\Event;

/**
 * Implements hook_menu_alter()
 * Display admin-menues based on users role
 */
function depot_menu_alter(&$items) {

   $items['admin']['access callback'] = 'depot_admin_access_only';
   
}

function depot_admin_access_only() {

  global $user;
  if (!in_array('administrator', $user->roles)){
    return false;
  }
  return true;
  
}


/**
 * Implements hook_menu
 */
function depot_menu() {

  $items['buchungen/neu'] = array(
    'title' => t('Neue Buchung'),
    'page callback' => 'depot_buchung_neu_form',
    'description' => t('Neue Buchung anlegen'),
    'access callback' => 'user_is_logged_in'
  );

  /*'args'     => array(
          array(
            'name'         => 'unit_ids',
            'type'         => 'string',
            'description'  => t('Unit IDs'),
            'source'       => array('param' => 'unit_ids'),
            'optional'     => TRUE,
          ),
          array(
            'name'         => 'unit_types',
            'type'         => 'string',
            'description'  => t('Unit Types'),
            'source'       => array('param' => 'unit_types'),
            'optional'     => TRUE,
          ),*/

  $items['ressourcen/neu'] = array(
    'title' => t('Neue Ressource anlegen'),
    'page callback' => 'depot_ressource_neu_form',
    'description' => t('Neue Ressource anlegen'),
    'access callback' => 'user_is_logged_in'
  );

  $items['depot/check_availability'] = array(
    'title' => NULL,
    'page callback' => 'depot_ajax_check_availability',
    'description' => 'AJAX method for resources'
  );

  return $items;
  
}

/* Wrapper to handle availability requests */
function depot_ajax_check_availability(){

  $path = explode("/",current_path());
  print_r($path);

  depot_check_availability();

  //drupal_add_http_header('Content-Type', 'application/json');

  /*
    echo json_encode($resultAdresse);
    
*/
  drupal_exit();
}

//function depot_check_availability($rid, $start, $end, $units = 1){
  function depot_check_availability(){

    $rid = 1;
  //$start = new DateTime($start);
  //$end = new DateTime($end);

  $query = db_select('bat_units', 'u')
           ->fields('u', array('type_id'))
           ->condition('type_id', $rid)
           ->execute();

  $unitsCount = $query->rowCount();
      
  if (!$unitsCount) {
    return t('Unbekannte Ressource');
  } else {
    foreach ($query->fetchAll() as $unit) {
   
      $u = bat_unit_load($unit->type_id);
     // var_dump($u);
     // exit();
       // ->condition('created', array($start_time, $end_time), 'BETWEEN');
    }

    if (count($units) == 0) {
      return ROOMS_NO_ROOMS;
    }
    
   return drupal_json_output($matches);
  }
}

/**
 * Called by path buchungen/neu
 * Presents a booking form, based on BAT Booking module
 */
function depot_buchung_neu_form($type = 'standard'){

  global $user;

  $booking = bat_booking_create(array('type' => $type, 'uid' => $user->uid));
  $booking->created = REQUEST_TIME;
  $booking->author_name = $user->name;
  $booking->status = 1;

  include_once('forms/depot_buchung_form.php');
  return drupal_get_form('depot_booking_edit_form', $booking);

}

/**
 * Called by path ressourcen/neu
 * Presents a booking form, based on BAT Booking module
 */
function depot_ressource_neu_form($type = 'depot'){

  global $user;

  $booking = bat_type_create(array('type' => $type, 'uid' => $user->uid));
  $booking->created = REQUEST_TIME;
  $booking->author_name = $user->name;
  $booking->status = 1;

  include_once('forms/depot_ressource_form.php');

  return drupal_get_form('depot_ressource_edit_form', $booking);

}

function _buchungen_neu_redirect() {

  drupal_goto('admin/bat/config/booking/add/standard');
  
}


/**
 * Implements hook_preprocess_views_view_table
 * Disable table header for "Neueste Ressourcen" block
 */
function depot_preprocess_views_view_table(&$vars) {
  
  if ($vars['view']->name == 'neueste_ressourcen') {
    $vars['header'] = array();
  }
  
}

/**
 * Implements hook_views_pre_render
 * Hides unwanted fields
 */
function depot_views_pre_render(&$view) {
  //print_r($view);
  global $user;
  
  if (!in_array('authenticated user', $user->roles)) {
    // bookings/new
    // unset($view->field['field_to_hide']);
  }
}


/*views-view-field.tpl.php
-> Mache Feld Bezirk (ID: field_bezirk) automatisch zu Link
-> Feld Kategorie (ID: field_kategorie) zu Link!*/


/**
 * Implements hook_form_alter
 * Turns "kategorie"- and "bezirk"-state-id-filter into select-field
 * TODO: Add caching
 * TODO: Sort #options via sort()
 */

function depot_form_alter(&$form, &$form_state, $form_id) {

//print_r($form);

  switch ($form_id){
    
    case 'views_exposed_form':
    
      $form['bezirk_id']['#type'] = "select";
      $form['bezirk_id']['#size'] = null;
      $form['bezirk_id']['#default_value'] = 'All';
      $form['bezirk_id']['#required'] = FALSE;
      $form['bezirk_id']['#options'] = depot_get_bezirke(true);
      
      $form['kategorie_id']['#type'] = "select";
      $form['kategorie_id']['#size'] = null;
      $form['kategorie_id']['#default_value'] = 'All';
      $form['kategorie_id']['#options'] = depot_get_kategorien(true);
    
    break;
    
  }
}

/**
 * function depot_get_available_units_by_rid
 * @param string rid
 * @param string $start_date
 * @param string $end_date
 * @param bool $format
 * @return array $events / [if $format:] array $event_ids
 */
function depot_get_available_units_by_rid($rid, $start_date, $end_date, $format = false){

  $modulePath = drupal_get_path('module', 'bat_api');
  include_once $modulePath .'/bat_api.module';

  $events = bat_api_services_events_index_calendar(0, $rid, $start_date, $end_date, 'depot_availability', TRUE);  

  if ($format){
    $event_ids = array();
    $clean_up_ids = array();
    foreach ($events as $key => $event){
      if ($event['blocking']){
        
        if ((strtotime($event['start']) <= strtotime($start_date) && strtotime($event['end']) <= strtotime($end_date))
             || (strtotime($event['start']) <= strtotime($end_date) && strtotime($event['end']) >= strtotime($start_date))){
          $clean_up_ids[$event['resourceId']] = true;
        }
      } else {
        $event_ids[$event['resourceId']] = true;
      }
    }
    foreach ($clean_up_ids as $key => $void){
      if ($event_ids[$key])
        unset($event_ids[$key]);
    }
    return $event_ids;

  }

  return $events;
  
}

/*
  function depot_get_bezirke
  @return array
*/
function depot_get_bezirke($format = false){
  if ($format){
    $result = array();
    $result[''] = '<'.t('Alle').'>';
    foreach (bat_event_get_states('depot_bezirk') as $state_id => $state){
      $result[$state_id] = $state['label'];
    }
    return $result;
  }
  return bat_event_get_states('depot_bezirk');
  
}

/**
 * function depot_get_kategorien
 * @return array
 */
function depot_get_kategorien($format = false){
 if ($format){
    $result = array();
    $result[''] = '<'.t('Alle').'>';
    foreach (bat_event_get_states('depot_kategorie') as $state_id => $state){
      $result[$state_id] = $state['label'];
    }
    return $result;
  }
  return bat_event_get_states('depot_kategorie');
  
}

/**
 * Add or remove units for certain ressource
 */
function depot_units_bulk_action($action = 'add', $units_name, $type_id, $total_units){
    
    global $user;

    if ($action == 'add'){

      for ($i = 0; $i <= $total_units; $i++) {
          $unit = bat_unit_create(array('type' => 'default'));
          $unit->name = $units_name . ' ' . $i;
          $unit->created = REQUEST_TIME;
      
          $unit->type_id = $type_id;
          $unit->default_state = 1;
          $unit->uid = $user->uid;
          $unit->save();
      }

    }

}